// Code generated by ___go_build_github_com_dminGod_sepaToGo. DO NOT EDIT.

package iso20022_camt_015_001_04

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type BICFIDec2014Identifier string

type ClearingSystemIdentification2Choice struct {
	Cd    ExternalClearingSystemIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Cd"`
	Prtry Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Prtry"`
}

type ClearingSystemMemberIdentification2 struct {
	ClrSysId ClearingSystemIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 ClrSysId,omitempty"`
	MmbId    Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 MmbId"`
}

type CommunicationAddress8 struct {
	PstlAdr  LongPostalAddress1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 PstlAdr"`
	PhneNb   PhoneNumber              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 PhneNb"`
	FaxNb    PhoneNumber              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 FaxNb,omitempty"`
	EmailAdr Max256Text               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 EmailAdr,omitempty"`
}

type ContactIdentificationAndAddress1 struct {
	Nm     Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Nm,omitempty"`
	Role   PaymentRole1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Role"`
	ComAdr CommunicationAddress8 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 ComAdr"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	ModfyMmb ModifyMemberV04 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 ModfyMmb"`
}

// Must be at least 1 items long
type ExternalClearingSystemIdentification1Code string

// Must be at least 1 items long
type ExternalFinancialInstitutionIdentification1Code string

type FinancialIdentificationSchemeName1Choice struct {
	Cd    ExternalFinancialInstitutionIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Cd"`
	Prtry Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Prtry"`
}

type GenericFinancialIdentification1 struct {
	Id      Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Id"`
	SchmeNm FinancialIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 SchmeNm,omitempty"`
	Issr    Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Issr,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type LongPostalAddress1Choice struct {
	Ustrd Max140Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Ustrd"`
	Strd  StructuredLongPostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Strd"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

type Member6 struct {
	MmbRtrAdr []MemberIdentification3Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 MmbRtrAdr,omitempty"`
	CtctRef   []ContactIdentificationAndAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 CtctRef,omitempty"`
	ComAdr    CommunicationAddress8              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 ComAdr,omitempty"`
}

type MemberIdentification3Choice struct {
	BICFI       BICFIDec2014Identifier              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 BICFI"`
	ClrSysMmbId ClearingSystemMemberIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 ClrSysMmbId"`
	Othr        GenericFinancialIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Othr"`
}

type MessageHeader1 struct {
	MsgId   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 MsgId"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 CreDtTm,omitempty"`
}

type ModifyMemberV04 struct {
	MsgHdr       MessageHeader1              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 MsgHdr"`
	MmbId        MemberIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 MmbId"`
	NewMmbValSet Member6                     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 NewMmbValSet"`
	SplmtryData  []SupplementaryData1        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 SplmtryData,omitempty"`
}

// May be one of LQMG, LMMG, PYMG, REDR, BKMG, STMG
type PaymentRole1Code string

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type StructuredLongPostalAddress1 struct {
	BldgNm     Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 BldgNm,omitempty"`
	StrtNm     Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 StrtNm,omitempty"`
	StrtBldgId Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 StrtBldgId,omitempty"`
	Flr        Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Flr,omitempty"`
	TwnNm      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 TwnNm"`
	DstrctNm   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 DstrctNm,omitempty"`
	RgnId      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 RgnId,omitempty"`
	Stat       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Stat,omitempty"`
	CtyId      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 CtyId,omitempty"`
	Ctry       CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Ctry"`
	PstCdId    Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 PstCdId"`
	POB        Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 POB,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.015.001.04 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
