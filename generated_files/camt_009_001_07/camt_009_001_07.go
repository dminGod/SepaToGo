// Code generated by ___go_build_github_com_dminGod_sepaToGo. DO NOT EDIT.

package iso20022_camt_009_001_07

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification4Choice struct {
	IBAN IBAN2007Identifier            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 IBAN"`
	Othr GenericAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Othr"`
}

type AccountSchemeName1Choice struct {
	Cd    ExternalAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Cd"`
	Prtry Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Prtry"`
}

type ActiveAmountRange3Choice struct {
	ImpldCcyAndAmtRg ImpliedCurrencyAndAmountRange1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 ImpldCcyAndAmtRg"`
	CcyAndAmtRg      ActiveCurrencyAndAmountRange3  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 CcyAndAmtRg"`
}

type ActiveCurrencyAndAmountRange3 struct {
	Amt       ImpliedCurrencyAmountRange1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Amt"`
	CdtDbtInd CreditDebitCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 CdtDbtInd,omitempty"`
	Ccy       ActiveCurrencyCode                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Ccy"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AddressType3Choice struct {
	Cd    AddressType2Code        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Prtry"`
}

type AmountRangeBoundary1 struct {
	BdryAmt float64 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 BdryAmt"`
	Incl    bool    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Incl"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type BICFIDec2014Identifier string

type BranchAndFinancialInstitutionIdentification6 struct {
	FinInstnId FinancialInstitutionIdentification18 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 FinInstnId"`
	BrnchId    BranchData3                          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 BrnchId,omitempty"`
}

type BranchData3 struct {
	Id      Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Id,omitempty"`
	LEI     LEIIdentifier   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 LEI,omitempty"`
	Nm      Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Nm,omitempty"`
	PstlAdr PostalAddress24 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 PstlAdr,omitempty"`
}

type ClearingSystemIdentification2Choice struct {
	Cd    ExternalClearingSystemIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Cd"`
	Prtry Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Prtry"`
}

type ClearingSystemMemberIdentification2 struct {
	ClrSysId ClearingSystemIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 ClrSysId,omitempty"`
	MmbId    Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 MmbId"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndPeriod2Choice struct {
	Dt   ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Dt"`
	Prd  Period2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Prd"`
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 ToDt"`
}

type Document struct {
	GetLmt GetLimitV07 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 GetLmt"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalAccountIdentification1Code string

// Must be at least 1 items long
type ExternalClearingSystemIdentification1Code string

// Must be at least 1 items long
type ExternalEnquiryRequestType1Code string

// Must be at least 1 items long
type ExternalFinancialInstitutionIdentification1Code string

// Must be at least 1 items long
type ExternalMarketInfrastructure1Code string

// Must be at least 1 items long
type ExternalPaymentControlRequestType1Code string

type FinancialIdentificationSchemeName1Choice struct {
	Cd    ExternalFinancialInstitutionIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Cd"`
	Prtry Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Prtry"`
}

type FinancialInstitutionIdentification18 struct {
	BICFI       BICFIDec2014Identifier              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 BICFI,omitempty"`
	ClrSysMmbId ClearingSystemMemberIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 ClrSysMmbId,omitempty"`
	LEI         LEIIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 LEI,omitempty"`
	Nm          Max140Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Nm,omitempty"`
	PstlAdr     PostalAddress24                     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 PstlAdr,omitempty"`
	Othr        GenericFinancialIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Othr,omitempty"`
}

type FromToAmountRange1 struct {
	FrAmt AmountRangeBoundary1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 FrAmt"`
	ToAmt AmountRangeBoundary1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 ToAmt"`
}

type FromToPercentageRange1 struct {
	Fr PercentageRangeBoundary1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Fr"`
	To PercentageRangeBoundary1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 To"`
}

type GenericAccountIdentification1 struct {
	Id      Max34Text                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Id"`
	SchmeNm AccountSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 SchmeNm,omitempty"`
	Issr    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Issr,omitempty"`
}

type GenericFinancialIdentification1 struct {
	Id      Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Id"`
	SchmeNm FinancialIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 SchmeNm,omitempty"`
	Issr    Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Issr,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Issr,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 SchmeNm,omitempty"`
}

type GetLimitV07 struct {
	MsgHdr      MessageHeader9       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 MsgHdr"`
	LmtQryDef   LimitQuery4          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 LmtQryDef,omitempty"`
	SplmtryData []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 SplmtryData,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ImpliedCurrencyAmountRange1Choice struct {
	FrAmt   AmountRangeBoundary1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 FrAmt"`
	ToAmt   AmountRangeBoundary1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 ToAmt"`
	FrToAmt FromToAmountRange1   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 FrToAmt"`
	EQAmt   float64              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 EQAmt"`
	NEQAmt  float64              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 NEQAmt"`
}

type ImpliedCurrencyAndAmountRange1 struct {
	Amt       ImpliedCurrencyAmountRange1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Amt"`
	CdtDbtInd CreditDebitCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 CdtDbtInd,omitempty"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type LimitCriteria6 struct {
	NewQryNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 NewQryNm,omitempty"`
	SchCrit  []LimitSearchCriteria6 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 SchCrit,omitempty"`
	RtrCrit  LimitReturnCriteria2   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 RtrCrit,omitempty"`
}

type LimitCriteria6Choice struct {
	QryNm   Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 QryNm"`
	NewCrit LimitCriteria6 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 NewCrit"`
}

type LimitQuery4 struct {
	QryTp   QueryType2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 QryTp,omitempty"`
	LmtCrit LimitCriteria6Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 LmtCrit,omitempty"`
}

type LimitReturnCriteria2 struct {
	StartDtTmInd bool `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 StartDtTmInd,omitempty"`
	StsInd       bool `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 StsInd,omitempty"`
	UsdAmtInd    bool `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 UsdAmtInd,omitempty"`
	UsdPctgInd   bool `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 UsdPctgInd,omitempty"`
}

type LimitSearchCriteria6 struct {
	SysId          SystemIdentification2Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 SysId,omitempty"`
	BilLmtCtrPtyId []BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 BilLmtCtrPtyId,omitempty"`
	DfltLmtTp      []LimitType1Choice                             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 DfltLmtTp,omitempty"`
	CurLmtTp       []LimitType1Choice                             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 CurLmtTp,omitempty"`
	AcctOwnr       BranchAndFinancialInstitutionIdentification6   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 AcctOwnr,omitempty"`
	AcctId         AccountIdentification4Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 AcctId,omitempty"`
	UsdAmt         ActiveAmountRange3Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 UsdAmt,omitempty"`
	UsdPctg        PercentageRange1Choice                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 UsdPctg,omitempty"`
	LmtCcy         ActiveCurrencyCode                             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 LmtCcy,omitempty"`
	LmtAmt         ActiveAmountRange3Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 LmtAmt,omitempty"`
	LmtVldAsOfDt   DateAndPeriod2Choice                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 LmtVldAsOfDt,omitempty"`
}

type LimitType1Choice struct {
	Cd    LimitType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Cd"`
	Prtry Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Prtry"`
}

// May be one of MULT, BILI, MAND, DISC, NELI, INBI, GLBL, DIDB, SPLC, SPLF, TDLC, TDLF, UCDT, ACOL, EXGT
type LimitType3Code string

type MarketInfrastructureIdentification1Choice struct {
	Cd    ExternalMarketInfrastructure1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Cd"`
	Prtry Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max34Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageHeader9 struct {
	MsgId   Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 MsgId"`
	CreDtTm ISODateTime        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 CreDtTm,omitempty"`
	ReqTp   RequestType4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 ReqTp,omitempty"`
}

type PercentageRange1Choice struct {
	Fr   PercentageRangeBoundary1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Fr"`
	To   PercentageRangeBoundary1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 To"`
	FrTo FromToPercentageRange1   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 FrTo"`
	EQ   float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 EQ"`
	NEQ  float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 NEQ"`
}

type PercentageRangeBoundary1 struct {
	BdryRate float64 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 BdryRate"`
	Incl     bool    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Incl"`
}

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 ToDt"`
}

type PostalAddress24 struct {
	AdrTp       AddressType3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 AdrTp,omitempty"`
	Dept        Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Dept,omitempty"`
	SubDept     Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 SubDept,omitempty"`
	StrtNm      Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 StrtNm,omitempty"`
	BldgNb      Max16Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 BldgNb,omitempty"`
	BldgNm      Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 BldgNm,omitempty"`
	Flr         Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Flr,omitempty"`
	PstBx       Max16Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 PstBx,omitempty"`
	Room        Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Room,omitempty"`
	PstCd       Max16Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 PstCd,omitempty"`
	TwnNm       Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 TwnNm,omitempty"`
	TwnLctnNm   Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 TwnLctnNm,omitempty"`
	DstrctNm    Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 DstrctNm,omitempty"`
	CtrySubDvsn Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 CtrySubDvsn,omitempty"`
	Ctry        CountryCode        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Ctry,omitempty"`
	AdrLine     []Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 AdrLine,omitempty"`
}

// May be one of ALLL, CHNG, MODF, DELD
type QueryType2Code string

type RequestType4Choice struct {
	PmtCtrl ExternalPaymentControlRequestType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 PmtCtrl"`
	Enqry   ExternalEnquiryRequestType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Enqry"`
	Prtry   GenericIdentification1                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Prtry"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type SystemIdentification2Choice struct {
	MktInfrstrctrId MarketInfrastructureIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 MktInfrstrctrId"`
	Ctry            CountryCode                               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.009.001.07 Ctry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
