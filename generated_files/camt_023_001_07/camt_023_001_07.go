// Code generated by ___go_build_github_com_dminGod_sepaToGo. DO NOT EDIT.

package iso20022_camt_023_001_07

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type Amount2Choice struct {
	AmtWthtCcy float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 AmtWthtCcy"`
	AmtWthCcy  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 AmtWthCcy"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type BICFIDec2014Identifier string

type BackupPaymentV07 struct {
	MsgHdr      MessageHeader1       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 MsgHdr"`
	OrgnlMsgId  MessageHeader1       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 OrgnlMsgId,omitempty"`
	InstrInf    PaymentInstruction13 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 InstrInf,omitempty"`
	TrfdAmt     Amount2Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 TrfdAmt"`
	Cdtr        SystemMember3        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Cdtr"`
	CdtrAgt     SystemMember3        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 CdtrAgt,omitempty"`
	DbtrAgt     SystemMember3        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 DbtrAgt,omitempty"`
	SplmtryData []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 SplmtryData,omitempty"`
}

type ClearingSystemIdentification2Choice struct {
	Cd    ExternalClearingSystemIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Cd"`
	Prtry Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Prtry"`
}

type ClearingSystemMemberIdentification2 struct {
	ClrSysId ClearingSystemIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 ClrSysId,omitempty"`
	MmbId    Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 MmbId"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	BckpPmt BackupPaymentV07 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 BckpPmt"`
}

// Must be at least 1 items long
type ExternalClearingSystemIdentification1Code string

// Must be at least 1 items long
type ExternalFinancialInstitutionIdentification1Code string

// Must be at least 1 items long
type ExternalMarketInfrastructure1Code string

type FinancialIdentificationSchemeName1Choice struct {
	Cd    ExternalFinancialInstitutionIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Cd"`
	Prtry Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Prtry"`
}

type GenericFinancialIdentification1 struct {
	Id      Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Id"`
	SchmeNm FinancialIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 SchmeNm,omitempty"`
	Issr    Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Issr,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type MarketInfrastructureIdentification1Choice struct {
	Cd    ExternalMarketInfrastructure1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Cd"`
	Prtry Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Prtry"`
}

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

type MemberIdentification3Choice struct {
	BICFI       BICFIDec2014Identifier              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 BICFI"`
	ClrSysMmbId ClearingSystemMemberIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 ClrSysMmbId"`
	Othr        GenericFinancialIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Othr"`
}

type MessageHeader1 struct {
	MsgId   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 MsgId"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 CreDtTm,omitempty"`
}

type PaymentInstruction13 struct {
	ReqdExctnDtTm ISODateTime        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 ReqdExctnDtTm,omitempty"`
	PmtTp         PaymentType4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 PmtTp,omitempty"`
}

// May be one of CBS, BCK, BAL, CLS, CTR, CBH, CBP, DPG, DPN, EXP, TCH, LMT, LIQ, DPP, DPH, DPS, STF, TRP, TCS, LOA, LOR, TCP, OND, MGL
type PaymentType3Code string

type PaymentType4Choice struct {
	Cd    PaymentType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Cd"`
	Prtry Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Prtry"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type SystemIdentification2Choice struct {
	MktInfrstrctrId MarketInfrastructureIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 MktInfrstrctrId"`
	Ctry            CountryCode                               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 Ctry"`
}

type SystemMember3 struct {
	SysId SystemIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 SysId,omitempty"`
	MmbId MemberIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.023.001.07 MmbId"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
