// Code generated by ___go_build_github_com_dminGod_sepaToGo. DO NOT EDIT.

package iso20022_camt_016_001_04

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type CurrencyCriteriaDefinition1Choice struct {
	QryNm   Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 QryNm"`
	NewCrit CurrencyExchangeCriteria2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 NewCrit"`
}

type CurrencyExchangeCriteria2 struct {
	NewQryNm Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 NewQryNm,omitempty"`
	SchCrit  []CurrencyExchangeSearchCriteria1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 SchCrit"`
}

type CurrencyExchangeSearchCriteria1 struct {
	SrcCcy  ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 SrcCcy"`
	TrgtCcy ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 TrgtCcy"`
}

type CurrencyQueryDefinition3 struct {
	QryTp   QueryType2Code                    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 QryTp,omitempty"`
	CcyCrit CurrencyCriteriaDefinition1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 CcyCrit,omitempty"`
}

type Document struct {
	GetCcyXchgRate GetCurrencyExchangeRateV04 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 GetCcyXchgRate"`
}

type GetCurrencyExchangeRateV04 struct {
	MsgHdr      MessageHeader1           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 MsgHdr"`
	CcyQryDef   CurrencyQueryDefinition3 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 CcyQryDef,omitempty"`
	SplmtryData []SupplementaryData1     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 SplmtryData,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

type MessageHeader1 struct {
	MsgId   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 MsgId"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 CreDtTm,omitempty"`
}

// May be one of ALLL, CHNG, MODF, DELD
type QueryType2Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.016.001.04 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
