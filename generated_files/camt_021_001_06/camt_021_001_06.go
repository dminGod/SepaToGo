// Code generated by ___go_build_github_com_dminGod_sepaToGo. DO NOT EDIT.

package iso20022_camt_021_001_06

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Document struct {
	RtrGnlBizInf ReturnGeneralBusinessInformationV06 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 RtrGnlBizInf"`
}

type ErrorHandling3Choice struct {
	Cd    ExternalSystemErrorHandling1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Cd"`
	Prtry Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Prtry"`
}

type ErrorHandling5 struct {
	Err  ErrorHandling3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Err"`
	Desc Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Desc,omitempty"`
}

// Must be at least 1 items long
type ExternalEnquiryRequestType1Code string

// Must be at least 1 items long
type ExternalPaymentControlRequestType1Code string

// Must be at least 1 items long
type ExternalSystemErrorHandling1Code string

type GeneralBusinessInformation1 struct {
	Qlfr     InformationQualifierType1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Qlfr,omitempty"`
	Sbjt     Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Sbjt,omitempty"`
	SbjtDtls Max350Text                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 SbjtDtls,omitempty"`
}

type GeneralBusinessOrError7Choice struct {
	OprlErr []ErrorHandling5         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 OprlErr"`
	BizRpt  []GeneralBusinessReport6 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 BizRpt"`
}

type GeneralBusinessOrError8Choice struct {
	BizErr []ErrorHandling5            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 BizErr"`
	GnlBiz GeneralBusinessInformation1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 GnlBiz"`
}

type GeneralBusinessReport6 struct {
	BizInfRef   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 BizInfRef"`
	GnlBizOrErr GeneralBusinessOrError8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 GnlBizOrErr"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Issr,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type InformationQualifierType1 struct {
	IsFrmtd bool          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 IsFrmtd,omitempty"`
	Prty    Priority1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Prty,omitempty"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

type MessageHeader7 struct {
	MsgId       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 MsgId"`
	CreDtTm     ISODateTime            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 CreDtTm,omitempty"`
	ReqTp       RequestType4Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 ReqTp,omitempty"`
	OrgnlBizQry OriginalBusinessQuery1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 OrgnlBizQry,omitempty"`
	QryNm       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 QryNm,omitempty"`
}

type OriginalBusinessQuery1 struct {
	MsgId   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 MsgId"`
	MsgNmId Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 MsgNmId,omitempty"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 CreDtTm,omitempty"`
}

// May be one of HIGH, NORM, LOWW
type Priority1Code string

type RequestType4Choice struct {
	PmtCtrl ExternalPaymentControlRequestType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 PmtCtrl"`
	Enqry   ExternalEnquiryRequestType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Enqry"`
	Prtry   GenericIdentification1                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Prtry"`
}

type ReturnGeneralBusinessInformationV06 struct {
	MsgHdr      MessageHeader7                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 MsgHdr"`
	RptOrErr    GeneralBusinessOrError7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 RptOrErr"`
	SplmtryData []SupplementaryData1          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 SplmtryData,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.021.001.06 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
